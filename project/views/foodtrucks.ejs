<!DOCTYPE html>
<html>
<title>Food Trucks</title>
<head>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous">
    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>

    <script type="text/javascript">
    	var map;
    	var restaurantData = [];
    	var current_hour;
    	var current_lat;
    	var current_long;
    	
		var loadMap = function() {
			if(navigator.geolocation) {
			    browserSupportFlag = true;
			    navigator.geolocation.getCurrentPosition(function(position) {
			    	current_lat = position.coords.latitude;
			    	current_long = position.coords.longitude;
			    }, function() {
			      handleNoGeolocation(browserSupportFlag);
			    });
			}

	    	var dateArr_G = Date().split(" ");
			current_hour = dateArr_G[4].split(":")[0];
			loadGeoData();
			var myOptions = {
				center: new google.maps.LatLng(39.9522, -75.1932),
				zoom: 18,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			};
		
			map = new google.maps.Map(document.getElementById("map"), myOptions);
			
			google.maps.event.addListener(map, 'click', function(event) {
	      		var latitude = event.latLng.lat();
	      		var longitude = event.latLng.lng();
	      		
	      		document.getElementById('lat').value = latitude;
	      		document.getElementById('long').value = longitude;	      		
	      	});
	      	
	      	$("button#submit").click(function() {
	      		$.post("/addfoodtruck", {
	      			name: document.getElementById('name').value,
					latitude: document.getElementById('lat').value,
					longitude: document.getElementById('long').value
					// creator: data.user
	      		}, function(data, status) {
	      			if (data.error != null) {
	      				alert("Error: " + data.error)
	      			} else {
			      		var myPos = new google.maps.LatLng(document.getElementById('lat').value, document.getElementById('long').value);
			      		var marker = new google.maps.Marker({
			      			position: myPos, draggable: false
			      		});
			      		
			      		marker['infowindow'] = new google.maps.InfoWindow({
			      			content: "<p><b>" + document.getElementById('name').value + "</b></p>" +
			      				// "<p>Description: " + document.getElementById('description').value + "</p>" +
			      				"<p><i>Food truck added by " + data.user + "</i></p>",
		      				foodTruckName: document.getElementById('name').value,
		      				creator: data.user
			      		});
			      		
			      		google.maps.event.addListener(marker, 'click', function() {
			      			this['infowindow'].open(map, this);
			      		});
			      		
			      		google.maps.event.addListener(marker, 'rightclick', function() {
							if (data.user == this['infowindow'].creator) {
					      		$.post("/removefoodtruck", {
									keyword: this['infowindow'].foodTruckName
					      		}, function(data, status) {
					      			if (data.error != null) {
					      				alert("Error: " + data.error)
					      			} else {
									}
					      		});
					      		marker.setMap(null);
							} else {
					      		alert("Error: You did not post this food truck, so you cannot delete it.");
							}
			      		});
			      		
		      			marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');
						marker.setMap(map);
						
						document.getElementById('lat').value = "";
	      				document.getElementById('long').value = "";
	      				document.getElementById('name').value = "";
	      				// document.getElementById('description').value = "";
					}
	      		});
	      	});
      	};

    	var curr_user = "";      
		window.onload = loadMap;

		function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
		  var R = 6371; // Radius of the earth in km
		  var dLat = deg2rad(lat2-lat1);  // deg2rad below
		  var dLon = deg2rad(lon2-lon1); 
		  var a = 
		    Math.sin(dLat/2) * Math.sin(dLat/2) +
		    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
		    Math.sin(dLon/2) * Math.sin(dLon/2)
		    ; 
		  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
		  var d = R * c; // Distance in km
		  return d;
		}

		function deg2rad(deg) {
		  return deg * (Math.PI/180)
		}

		function loadGeoData() {
      		$.getJSON('http://localhost:8080/foodtruckdata', function(resData) {
      			curr_user = resData.user;
      			console.log("USER: " + resData.user);
      			console.log("DATA: " + resData.data);

      			var user = resData.user;
      			var data = resData.data;
      			restaurantData = data;
      			for (var i = 0; i < data.length; i++) {
      				if (data[i] != undefined && data[i] != null) {
		      		var myPos = new google.maps.LatLng(JSON.parse(data[i].vals)["latitude"], JSON.parse(data[i].vals)["longitude"]);
		      		var marker = new google.maps.Marker({
		      			position: myPos, draggable: false
		      		});

					var dateArr = Date().split(" ");
					var curr_hour = dateArr[4].split(":")[0];
					var curr_date = dateArr[1] + " " + dateArr[2];
					console.log("DATE: " + curr_date);
					var hour_of_review = JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[2];

					var date_of_review = "";
					if (JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[3] != undefined) {
						date_of_review = JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[3].split(" ")[1] + " " + JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[3].split(" ")[2];
					}

					// console.log("CURR: " + curr_hour);
					// console.log("REVIEW: " + hour_of_review);

		      		if (JSON.parse(data[i].vals)["review"] == "No reviews yet") {
			      		marker['infowindow'] = new google.maps.InfoWindow({
			      			content: "<div id='foodtruckinfo'><p id='ft_name'><b><u>" + data[i].key + "</u></b></p>" +
			      				"<p id='line'>Line: " + JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1] + "</p>" +
			      				// "<p>Description: " + JSON.parse(data[i].vals)["description"] + "</p>" +
			      				"<p class='center'><button type='button' class='center btn-geckoboard btn-outline btn-lg' id='submit_review' style='font-size: 24px;' onclick =\"showOptions(\'" + data[i].key + "\'," + JSON.parse(data[i].vals)["latitude"] + "," + JSON.parse(data[i].vals)["longitude"] + ")\">Report New Wait Time</button></p>" +
			      				"<i id='user_creator'>Food truck added by " + JSON.parse(data[i].vals)["creator"] + "</i></div>",
			      			foodTruckName: data[i].key,
			      			creator: JSON.parse(data[i].vals)["creator"]
			      		});
		      		} else if (curr_hour == hour_of_review && curr_date == date_of_review) {
			      		marker['infowindow'] = new google.maps.InfoWindow({
			      			content: "<div id='foodtruckinfo'><p id='ft_name'><b><u>" + data[i].key + "</u></b></p>" +
			      				"<p id='line'>Line: " + JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[0] + " (reported by " + JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[1] + " at " + JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[2] + ":" + JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[3] + ")</p>" +
			      				"<p id='all_reviews'><a onclick=\"getReviewsInPastHour(\'" + data[i].key + "\')\">Click here to see all reviews in the past hour</a></p>" +
			      				// "<p>Description: " + JSON.parse(data[i].vals)["description"] + "</p>" +
			      				"<p class='center'><button type='button' class='center btn-geckoboard btn-outline btn-lg' id='submit_review' style='font-size: 24px;' onclick =\"showOptions(\'" + data[i].key + "\'," + JSON.parse(data[i].vals)["latitude"] + ", " + JSON.parse(data[i].vals)["longitude"] + ")\">Report New Wait Time</button></p>" +
			      				"<i id='user_creator'>Food truck added by " + JSON.parse(data[i].vals)["creator"] + "</i></div>",
			      			foodTruckName: data[i].key,
			      			creator: JSON.parse(data[i].vals)["creator"]
			      		});
					} else {
						// TODO: Display the average line length at that time
						// JSON.parse(data[i].vals)["review"].split(",")[JSON.parse(data[i].vals)["review"].split(",").length - 1].split(":")[0]

						var total_reviews = JSON.parse(data[i].vals)["review"].split(",");
						console.log(total_reviews);

						var average_line_length_message = "";

						// Loop through the reviews
						var interval_number = 0;
						for (var p = 1; p < total_reviews.length; p++) {
							// console.log(total_reviews[i]);
							var line_length = total_reviews[p].split(":")[0];
							var hour_of_review = total_reviews[p].split(":")[2];
							// console.log("LINE LENGTH: " + line_length + " HOUR: " + hour_of_review);

							var dateArr = Date().split(" ");
							var hour = dateArr[4].split(":")[0];

							if (hour == hour_of_review) {
								if (line_length == "No Line") {
									interval_number += 1;
								} else if (line_length == "Less than 5") {
									interval_number += 2;
								} else if (line_length == "5-10") {
									interval_number += 3;
								} else if (line_length == "11-15") {
									interval_number += 4;
								} else if (line_length == "16+") {
									interval_number += 5;
								}
							}
						}

						var average_interval_num = Math.round(interval_number / (total_reviews.length - 1));
						console.log("AVERAGE: " + average_interval_num);

						if (interval_number == 0) {
							average_line_length_message += "There isn't enough data to display the average line length for the current time";
						} else if (interval_number == 1) {
							average_line_length_message += "No Line (This is an average for this time because there hasn't been a recent reporting)";
						} else if (interval_number == 2) {
							average_line_length_message += "Less than 5 (This is an average for this time because there hasn't been a recent reporting)";
						} else if (interval_number == 3) {
							average_line_length_message += "5-10 (This is an average for this time because there hasn't been a recent reporting)";
						} else if (interval_number == 4) {
							average_line_length_message += "11-15 (This is an average for this time because there hasn't been a recent reporting)";
						} else if (interval_number == 5) {
							average_line_length_message += "16+ (This is an average for this time because there hasn't been a recent reporting)";
						}

			      		marker['infowindow'] = new google.maps.InfoWindow({
			      			content: "<div id='foodtruckinfo'><p id='ft_name'><b><u>" + data[i].key + "</u></b></p>" +
			      				"<p id='line'>Line: " + average_line_length_message + "</p>" +
			      				"<p id='all_reviews'><a onclick=\"getReviewsInPastHour(\'" + data[i].key + "\')\">Click here to see all reviews in the past hour</a></p>" +
			      				// "<p>Description: " + JSON.parse(data[i].vals)["description"] + "</p>" +
			      				"<p class='center'><button type='button' class='center btn-geckoboard btn-outline btn-lg' id='submit_review' style='font-size: 24px;' onclick =\"showOptions(\'" + data[i].key + "\'," + JSON.parse(data[i].vals)["latitude"] + ", " + JSON.parse(data[i].vals)["longitude"] + ")\">Report New Wait Time</button></p>" +
			      				"<i id='user_creator'>Food truck added by " + JSON.parse(data[i].vals)["creator"] + "</i></div>",
			      			foodTruckName: data[i].key,
			      			creator: JSON.parse(data[i].vals)["creator"]
			      		});
					}
		      		
		      		google.maps.event.addListener(marker, 'click', function() {
		      			this['infowindow'].open(map, this);
		      		});

		      		google.maps.event.addListener(marker, 'rightclick', function() {
						if (user == this['infowindow'].creator) {
				      		$.post("/removefoodtruck", {
								keyword: this['infowindow'].foodTruckName
				      		}, function(data, status) {
				      			if (data.error != null) {
				      				alert("Error: " + data.error)
				      			} else {
								}
				      		});
				      		marker.setMap(null);
						} else {
				      		alert("Error: You did not post this food truck, so you cannot delete it.");
						}
		      		});
		      		
		      		if (user == JSON.parse(data[i].vals)["creator"]) {
		      			// marker.setIcon('http://maps.google.com/mapfiles/ms/icons/yellow-dot.png');
		      			marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');
		      		} else {
		      			marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');
		      		}
		      		marker.setMap(map);
		      		}
      			}
      		});
      	};

      	var showOptions = function (name, lat_ft, long_ft) {
      		var distance_from_truck = getDistanceFromLatLonInKm(lat_ft, long_ft, current_lat, current_long);

			if (distance_from_truck > 0.3) {
				alert("You are not close enough to report a line length for this food truck.");
			} else if (current_hour < 8 || current_hour > 17) {
      			alert("Most food trucks are not open at this time so we are no longer accepting reportings. Reportings are only accepted between 8 a.m. and 5 p.m.");
      		} else {
	      		$("#line").hide();
	      		$("#submit_review").hide();
	      		$("#user_creator").hide();
	      		$("#foodtruckinfo").html(
	      					"<b><p>How many people are in line?</p></b>" +
	      					"<form id='test'>" + 
					    		"<p><input type='radio' id='r1' name='answer'>No Line</p>" +
					    		"<p><input type='radio' id='r2' name='answer'>Less than 5</p>" +
					    		"<p><input type='radio' id='r3' name='answer'>5-10</p>" + 
					    		"<p><input type='radio' id='r4' name='answer'>11-15</p>" +
					    		"<p><input type='radio' id='r5' name='answer'>16+</p>" +
								"<div style='text-align: center; margin-top: 5px;'>" +
									"<button type='button' class='btn-geckoboard btn-outline btn-lg' id='submit_new_wait_time' style='font size: 32px;' onclick=\"submitReview(\'" + name + "\')\">Submit</button>" +
								"</div>" +
							"</form>");
	      	}
      	}

      	var submitReview = function(name) {
      		// console.log(name);
      		var review = "";
			if (document.getElementById('r1').checked) {
				review = "No Line";
			} else if (document.getElementById('r2').checked) {
				review = "Less than 5";
			} else if (document.getElementById('r3').checked) {
				review = "5-10";
			} else if (document.getElementById('r4').checked) {
				review = "11-15";
			} else if (document.getElementById('r5').checked) {
				review = "16+";
			}

			// alert("REVIEW: " + review);

			var attr = {};
			
			console.log("DATA");
			for (var i = 0; i < restaurantData.length; i++) {
				if (restaurantData[i] != null && restaurantData[i].key == name) {

					console.log("IT IS EQUAL");
					console.log(restaurantData[i]);
					attr['name'] = JSON.parse(restaurantData[i].vals)["name"];
					attr['latitude'] = JSON.parse(restaurantData[i].vals)["latitude"];
					attr['longitude'] = JSON.parse(restaurantData[i].vals)["longitude"];
					attr['creator'] = JSON.parse(restaurantData[i].vals)["creator"];
					attr['review'] = JSON.parse(restaurantData[i].vals)["review"] + "," + review; 

		      		$.post("/updatefoodtruck", {
		      			name: attr['name'],
						latitude: attr['latitude'],
						longitude: attr['longitude'],
						creator: attr['creator'],
						review: attr['review']
		      		}, function(data, status) {
		      			if (data.error != null) {
		      				alert("Error: " + data.error);
		      			} else {
		      				$("#foodtruckinfo").html(
		      					"<p>Your review was successfully submitted! Refresh this page to see the updated review!</p>"
		      				);
						}
		      		});
				}
			}
      	}

      	var getReviewsInPastHour = function(name) {
      		$("#line").hide();
      		$("#submit_review").hide();
      		$("#user_creator").hide();

      		var review_string = "<p id='ft_name'><b><u>" + name + "</u></b></p>" + "<ul>";
			for (var i = 0; i < restaurantData.length; i++) {
				if (restaurantData[i] != null && restaurantData[i].key == name) {
					review = JSON.parse(restaurantData[i].vals)["review"];
					if (review == "No reviews yet") {
      					$("#foodtruckinfo").html("<p>No reviews in the past hour</p>");
					} else {
						reviews = review.split(",");
						var dateArr = Date().split(" ");
						var curr_date = dateArr[1] + " " + dateArr[2];
						var hour = dateArr[4].split(":")[0];
						var min = dateArr[4].split(":")[1];
						for (var j = 1; j < reviews.length; j++) {
							var user_reviewer = reviews[j].split(":")[1];
							var review_content = reviews[j].split(":")[0];
							var review_hour = reviews[j].split(":")[2];
							var review_min = reviews[j].split(":")[3].split(" ")[0];
							var review_date = reviews[j].split(":")[3].split(" ")[1] + " " + reviews[j].split(":")[3].split(" ")[2];
							var review_down_votes = reviews[j].split(":")[4];
							if (curr_date == review_date) {
								var minute_diff = 60 - review_min + parseInt(min);
								if (review_hour == hour || (parseInt(review_hour) + 1 == hour && minute_diff < 60)) {
									if (parseInt(reviews[j].split(":")[4]) < 3) {
										review_string += "<li><p>" + review_content + " (" + user_reviewer + " at " + review_hour + ":" + review_min + ")<span class='glyphicon glyphicon-chevron-down' onclick=\"downVote(\'" + name + "\',\'" + reviews[j] + "\')\"><span class='num_downvotes'>" + review_down_votes + "</span></span></p></li>";
									}
								}
							}
						}
					}
				}
			}
			review_string += "</ul>";
			if (review_string == "<p id='ft_name'><b><u>" + name + "</u></b></p>" + "<ul></ul>") {
				$("#foodtruckinfo").html("<p id='ft_name'><b><u>" + name + "</u></b></p>" +
					"<p>No reviews in the past hour.</p>");
			} else {
				$("#foodtruckinfo").html(review_string);
			}
      	}

      	var downVote = function(name, review) {
      		console.log(name);
      		console.log(review);
      		var new_review_down_votes = parseInt(review.split(":")[4]) + 1;
      		var new_review = review.split(":")[0] + ":" + review.split(":")[1] + ":" + review.split(":")[2] + ":" + review.split(":")[3] + ":" + new_review_down_votes;

      		console.log(curr_user);

      		// Check if this is the first downvote
      		if (review.split(":").length == 5) {
      			new_review += ":" + curr_user;
      		} else {
      			new_review += ":" + review.split(":")[5] + "*" + curr_user;
      		}

      		// Check if the user has already downvoted
      		var already_down_voted = false;
      		var downvoted_users;
      		if (review.split(":")[5] != undefined) {
	      		var downvoted_users = review.split(":")[5].split("*");

	      		for (var i = 0; i < downvoted_users.length; i++) {
	      			if (curr_user == downvoted_users[i]) {
	      				already_down_voted = true;
	      			}
	      		}
	      	} else {
	      		already_down_voted = false;
	      	}
      		

      		if (!already_down_voted) {
      			console.log("NEW REVIEW: " + new_review);
				for (var i = 0; i < restaurantData.length; i++) {
					if (restaurantData[i] != null && restaurantData[i].key == name) {
						var curr_review = JSON.parse(restaurantData[i].vals)["review"];
						var new_review_to_add =  curr_review.replace(review, new_review)

			      		$.post("/downvote", {
			      			name: JSON.parse(restaurantData[i].vals)["name"],
							latitude: JSON.parse(restaurantData[i].vals)["latitude"],
							longitude: JSON.parse(restaurantData[i].vals)["longitude"],
							creator: JSON.parse(restaurantData[i].vals)["creator"],
							review: new_review_to_add
			      		}, function(data, status) {
			      			if (data.error != null) {
			      				alert("Error: " + data.error);
			      			} else {
			      				$("#foodtruckinfo").html(
			      					"<p>You have down voted a review a review. Refresh this page to see the updated review!</p>"
			      				);
							}
			      		});
					}
				}
			} else {
				alert("You have already down voted this review.");
			}
      	}

      	var refreshTime = function() {
      		$("#clock").html((new Date()).toString());
      		$.get("/foodtruckdata", function(data, status) {
      			console.log("DATA");
      			console.log(data);
      			
      			if (restaurantData.length != 0) {
	      			var restaurantDataLength = JSON.parse(restaurantData).data.length;
	      			var dataLength = JSON.parse(data).data.length;
	      			if (restaurantDataLength != dataLength) {
	      				loadGeoData();
	      				//for (var i = restaurantDataLength; i < dataLength; i++) {
	      					//console.log("HELLO");
	      					//MAKE THE MARKER
	      				//}
	      			}
      			}
      			restaurantData = data;
      		});
      		setTimeout(refreshTime, 8000);
      	};
      	
      	$(document).ready(function() {
      		// setTimeout(refreshTime, 4000);
		    console.log(Date());
			var dateArr = Date().split(" ");
			var date = dateArr[1] + " " + dateArr[2] + " " + dateArr[4].split(":")[0] + ":" + dateArr[4].split(":")[1];
			console.log(date);
      		loadGeoData();
      	});
    </script>

    <style>
		body {
			font-family: "Verdana",sans-serif;
			font-weight: 300;
			text-rendering: optimizeLegibility;
		}

		h1 {
			font-size: 72px;
			color: #CE0B24;
			text-align: center;
			margin-top: 10%;
		}

		h2 {
			text-align: center;
			/*padding-bottom: 10px;*/
			color: #CE0B24;
			font-size: 48px;
		}

		#description {
			padding-bottom: 20px;
		}

		#map {
			width: 100%;
			height: 800px;
			margin: 0 auto 0 auto;
		}

	  .form-control {
      	font-size: 36px;
      	height: 100px;
      	margin-bottom: 50px;
      }

      p {
      	text-align: center;
      	padding-top: 20px;
      	font-size: 24px;
      }

      .center {
          text-align: center;
      }

      #startButton {
          padding-top: 20px;
          padding-bottom: 40px;
      }

	  .btn-geckoboard {
        display: inline-block;
        padding: 10px 56px;
        margin-bottom: 0;
        font-size: 18px;
        font-weight: 300;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        border: 2px solid transparent;
        border-radius: 10px;
        -webkit-transition: color 0.3s ease, background 0.3s ease;
        -moz-transition: color 0.3s ease, background 0.3s ease;
        -ms-transition: color 0.3s ease, background 0.3s ease;
        -o-transition: color 0.3s ease, background 0.3s ease;
      }

      .btn-group-lg>.btn, .btn-lg {
        padding: 10px 36px;
        font-size: 24px;
        line-height: 1.3333333;
      }

      .btn-outline {
        color: white;
        background-color: #58E2C2;
        border-color: #58E2C2;
      }

      .btn-geckoboard:hover {
        -webkit-transition: color 0.3s ease, background 0.3s ease;
        -moz-transition: color 0.3s ease, background 0.3s ease;
        -ms-transition: color 0.3s ease, background 0.3s ease;
        -o-transition: color 0.3s ease, background 0.3s ease;
        background-color: #58E2C2;
        color: white;
        text-decoration: none;
      }

      .btn-geckoboard:focus {
          background-color: rgba(0, 0, 0, 0);
          color: #58E2C2;
          text-decoration: none;
      }

      #logout {
      	text-align: center;
      	float: right;
      	margin-right: 10px;
      	margin-top: 10px;
      	font-size: 24px;
      	color: #58E2C2;
      }

      #logout button {
	    background-color: Transparent;
	    background-repeat:no-repeat;
	    border: none;
	    cursor:pointer;
	    overflow: hidden;
	    outline:none;
      }

      .glyphicon-chevron-down {
      	padding-left: 25px;
      	color: black;
      }

      .num_downvotes {
      	font-size: 18px;
      }
    </style>
</head>
<body>
		<div id="logout">
			<form action="/logout" method="post">
				<button type="submit">Log out</button>
			</form>
		</div>

	<div class="container">
		<div class="row">
  			<h1>Food Truck Map</h1>
  		</div>
		
		<!-- <div id="clock">(Time goes here)</div> -->
		
		<div id="map"></div>
<!-- 		<div class="modal-footer">
			<div class="row center" id="startButton" ng-controller="TranscriptController as tran">
				<button id="display" type="button" onclick="loadGeoData()" class="btn-geckoboard btn-outline btn-lg">Show markers</button>
				<button id="hide" type="button" class="btn-geckoboard btn-outline btn-lg" onclick = "loadMap()">Hide markers</button>
			</div>       
		</div>
 -->		
  		<h2>Add a Food truck</h2>
  		<p id="description">Click on a coordinate on the map to get the latitude and longitude</p>
		<%if (message != null) { %>
		<font color="red"><%= message %><p>
		<% } %>
		<font color="black">
		<form>
			<input type="text" name="nameInputField" class="form-control" id="name" placeholder="Food Truck Name">
			<!-- <p>Enter latitude:</p> -->
			<input type="text" name="latitudeInputField" class="form-control" id="lat" placeholder="Latitude">
			<!-- <p>Enter longitude:</p> -->
			<input type="text" name="longitudeInputField" class="form-control" id= "long" placeholder="Longitude">
			<div style="text-align: center; margin-top: 5px; margin-bottom: 20px;">
				<button type="button" class="btn-geckoboard btn-outline btn-lg" id="submit" style="font-size: 32px;">Submit</button>
			</div>
		</form>
		
		<!-- <h4 style="text-align: center;">Click the button below to logout</h4> -->
  	</div>
</body>
</html>